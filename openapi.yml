openapi: 3.0.3
info:
  title: PlantExchange - Gang of Fork
  description: |-
    This is the first version of the API running the PlantExchange anonymous crypto-currency marketplace.
    It will be rebuilt decentralized in the first half of 2023.
    Learn more about this application by clicking on the links below.
    
  contact:
    email: mail@gang-of-fork.de
  version: 0.0.1
externalDocs:
  description: Find out more about this application
  url: https://plantexchange.gang-of-fork.de
servers:
  - url: https://api.plantexchange.gang-of-fork.de/api/v1
tags:
  - name: auth
    description: Everything about registration and authentication
  - name: offers
    description: Routes for offers
paths:
  /auth/register:
    post:
      # move when needed
      #security:
      #  - bearerJWT: []
      tags:
        - auth
      summary: Register a new user
      description: Add a new user to the user collection
      operationId: postRegister
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
                type: object
                properties:
                  publicAddress:
                    type: string
                    example: "0x2C5c4704F70E5bD5C1C82FD399b920A1B35b9702"
                    format: Metamask Wallet Address
        required: true
      responses:
        '201':
          description: User was created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login/{publicAddress}:
    get:
      tags:
        - auth
      summary: Get Nonce for Login Process
      description: Get the nonce, that needs to be signed by Metamask for the authentication process
      operationId: getLogin
      parameters:
          - in: path
            name: publicAddress
            schema:
              type: string
              format: hex
            required: true
          
      responses:
        '200':
          description: Auth User Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicAddress:
                    type: string
                    example: "0x2C5c4704F70E5bD5C1C82FD399b920A1B35b9702"
                    format: Metamask Wallet Address
                  nonce: 
                    type: string
                    example: "646454"
        '400':
          description: Invalid input
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login:
    post:
      # move when needed
      #security:
      #  - bearerJWT: []
      tags:
        - auth
      summary: Register a new user
      description: Add a new user to the user collection
      operationId: postLogin
      requestBody:
        description: Login a user
        content:
          application/json:
            schema:
              type: object
              properties:
                publicAddress:
                  type: string
                  example: "0x2C5c4704F70E5bD5C1C82FD399b920A1B35b9702"
                  format: hex
                signature:
                  type: string
                  example: "0x0e25434a97fa5789980dddfa5190cc5bc7846e026d6bbd2650036069283c64ca16ffd212716f01997486fe88c49f2bfabaefd51048673d248bc32ad9a5470fc61c"
                  format: hex
        required: true
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema: 
                type: object
                properties:
                  jwt: 
                    type: string
                    format: JWT
                    example: "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MzMxZjUyZmE3Y2Y2NTJkNWE5MTU0NmUiLCJwdWJsaWNBZGRyZXNzIjoiMHgyQzVjNDcwNEY3MEU1YkQ1QzFDODJGRDM5OWI5MjBBMUIzNWI5NzAyIn0.scNUhYHYF7a7XpPhgSSy5nSZrjYGPrDG4Ymym733OVH47oi6wnVLGBvaDEgQ7VZ5qwzkCbOHdB_X9e3w8EoKiA"
                  
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Signature authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
  
  /offers:
    get:
      tags:
        - offers
      security:
      - bearerJWT: []
      summary: Get list of all offers
      description: Get a List of all offers
      responses:
        200:
          description: List of all offers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Offer'
                  count:
                    type: integer
    post:
      tags:
        - offers
      security:
      - bearerJWT: []
      summary: Create a new offer
      description: Create a new offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      responses:
        201:
          description: offer created

  /offers/bounds:
    get:
      parameters:
      - in: query
        name: crypto
        required: true
        schema:
          type: string
          enum: [ 'BTC', 'ETH', 'MON', 'CLT' ]
      - in: query
        name: currency
        required: true
        schema:
          type: string
          enum: [ 'GBP', 'USD', 'CAD', 'EUR' ]
      tags:
        - offers
      security:
      - bearerJWT: []
      summary: Get upper and lower bounds for offer amounts
      description: Get upper and lower bounds for offer amounts
      responses:
        200:
          description: List of all offers
          content:
            application/json:
              schema:
                type: object
                properties:
                  minCurrency:
                    type: number
                  maxCurrency:
                    type: number
                  minCrypto:
                    type: number
                  maxCrypto:
                    type: number

  /offers/{offerId}:
    parameters:
      - in: path
        name: offerId
        required: true
        schema:
          type: string
    get:
      tags:
        - offers
      security:
      - bearerJWT: []
      summary: Get list of all offers
      description: Get a List of all offers
      responses:
        200:
          description: List of all offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

    delete:
      tags:
        - offers
      security:
      - bearerJWT: []
      summary: Delete an offer
      description: Delete an offer by id
      responses:
        201:
          description: offer deleted
  
  /offers/{offerId}/match:
    parameters:
      - in: path
        name: offerId
        required: true
        schema:
          type: string
    post:
      tags:
        - matches
      security:
      - bearerJWT: []
      summary: Match an offer by id
      description: Create a match for an offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicAddress:
                    type: string
                    description: "public address to use for encryption"
                  match:
                    type: string
                    description: "id of the match"
  
  /matches/{matchId}/submit:
    parameters:
      - in: path
        name: matchId
        required: true
        schema:
          type: string
    post:
      tags:
        - matches
      security:
      - bearerJWT: []
      summary: Submit encrypted contact details 
      description: Submit encrypted contact details for a match
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ hash ]
              properties:
                hash:
                  type: string
                  description: "encrypted contact details"
      responses:
        201:
          description: Success
  
  /matches/my:
    get:
      tags:
      - matches
      security:
      - bearerJWT: []
      summary: Get matches for own offers
      description: Get matches for offers that were created by the logged in user
      responses:
        200:
          description: List of all matches
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'
                  count:
                    type: integer
  /matches/{matchId}:
    parameters:
      - in: path
        name: matchId
        required: true
        schema:
          type: string
    get:
      tags:
      - matches
      security:
      - bearerJWT: []
      summary: Get match by id
      description: Get match by id
      responses:
        200:
          description: data of the match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
          readOnly: true
        publicAddress:
          type: string
          format: Metamask Wallet Address
        nonceId:
          type: string
          format: Mongo ObjectId
          example: 6331f650fe79dbd805b7af22
          readOnly: true

    
    Offer:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name: 
          type: string
          readOnly: true
        type:
          type: string
          enum: [ 'BUY', 'SELL' ]
        location:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
        currrencyAmount:
          type: integer
        cryptoAmount:
          type: integer
        crypto:
          type: string
          enum: [ 'BTC', 'ETH', 'MON', 'CLT' ]
        currency:
          type: string
          enum: [ 'GBP', 'USD', 'CAD', 'EUR' ]
          
    Match:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        viewedAt:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          readOnly: true
        user:
          type: string
          description: User ObjectId
          readOnly: true
        offer:
          type: string
          description: Offer ObjectId
          readOnly: true
        hash:
          type: string
          readOnly: true

          
    error:
      type: object
      properties:
        statusCode:
          type: number
          format: HTTP-Statuscode
        msg: 
          type: string
  securitySchemes:
    bearerJWT:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
    
      
security:
  - bearerJWT: [] 
        
